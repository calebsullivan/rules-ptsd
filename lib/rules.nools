// rules.nools

define Person {
    patient_concern : null,
    patient_age : null,
    assult : null,
    displaced : null,
    pain : null,
    a : null,
    b : null,
    c : null,
    d : null,
    e : null,
    symptoms_list: null
}

define Diagnosis {
    di : null
}

define Reason {
    re : null
}

define Confidence {
    co : null
}

define Return {
    rv : null
}



rule Flashbacks {
    when {
        p: Person p.patient_concern == false;
        not(d : Diagnosis d.di == "healthy");
    }
    then {
        var output = new Diagnosis({di:"low"});
        emit("di", output);
        assert(output);
    }
}

rule Recall_event_concerning {
    when {
        p: Person 'bad' in p.a OR 'not' in p.a;
        not(d : Diagnosis d.di == "none");
    }
    then {
        var output = new Diagnosis({di:"low"});
        emit("di", output);
        assert(output);
    }
}


rule Anxiety {
    when {
        p: Person 'no' in p.c AND 'no' in p.d AND 'yes' in p.a;
        not(d : Diagnosis d.di == "none");
    }
    then {
        var output = new Diagnosis({di:"anxiety"});
        emit("di", output);
        assert(output);
    }
}

rule Association_not_affirmative {
    when {
        p: Person 'no' in p.b OR 'sometimes' notIn p.b;
        not(d : Diagnosis d.di == "none");
    }
    then {
        var output = new Diagnosis({di:"healthy"});
        emit("di", output);
        assert(output);
    }
}

rule Dreams_or_flashbacks_affirmative {
    when {
        p: Person 'no' notIn p.c;
        not(d : Diagnosis d.di == "none");
    }
    then {
        var output = new Diagnosis({di:"low"});
        emit("di", output);
        assert(output);
    }
}


rule Forced_to_leave_home {
    when {
        p: Person p.displaced == true;
    }
    then {
        var output = new Diagnosis({di:"none"});
        emit("di", output);
        assert(output);
    }
}

rule Negative_feelings {
    when {
        p: Person 'bad' in p.a OR 'not' in p.a;
        not(p: Person 'good' in p.a OR 'blah' in p.a);
    }
    then {
        var output = new Diagnosis({di:"high", co:"40"});
        emit("di", output);
        assert(output);
    }
}

rule PTSD_Marker {
    when {
        d : Diagnosis d.di == 'low';
    }
    then {
        var output = new Return({rv:"-20"});
        emit("rv", output);
        assert(output);
    }
}

rule Responded {
    when {
        p: Person;
    }
    then {
        var output = new Return({rv : "", co:"100", di:"none"});
        emit("rv", output);
        assert(output);
    }
}
